<script type="text/javascript">
    //<![CDATA[
    // Pass some data over to vZero integration JS
    var vzero = new vZero(
        'gene_braintree_creditcard',
        '<?php echo $this->getClientToken(); ?>',
        false,
        <?php echo $this->isHostedFields(); ?>,
        ['order-billing_address_firstname', 'order-billing_address_lastname'],
        ['order-billing_address_postcode']
    );

    // Init the environment
    vzero.init();

    vZero.addMethods({
        /**
         * Update data has no value in the admin
         */
        updateData: function(callback, params) {
            callback();
        }
    });

    vZeroIntegration.addMethods({

        /**
         * The loading instance is to just disable the save button within the admin
         */
        setLoading: function () {
            disableElements('save');
        },
        resetLoading: function () {
            enableElements('save');
        },

        /**
         * Attach observer events for the submission of the page
         */
        prepareSubmitObserver: function () {

            // Store a pointer to the vZero integration
            var vzeroIntegration = this;

            // Store the original payment method
            var _originalAdminOrderSubmit = AdminOrder.prototype.submit;

            // Intercept the save function
            AdminOrder.prototype.submit = function() {

                // Should we intercept?
                if (vzeroIntegration.shouldInterceptSubmit('creditcard')) {

                    // Store a pointer to the payment class
                    var paymentThis = this;
                    var paymentArguments = arguments;

                    // If everything was a success on the checkout end, let's submit the vZero integration
                    vzeroIntegration.submit('creditcard', function () {
                        return _originalAdminOrderSubmit.apply(paymentThis, paymentArguments);
                    });

                } else {
                    return _originalAdminOrderSubmit.apply(this, arguments);
                }

            };

            // On dom load init hosted fields if it's enabled
            document.observe("dom:loaded", function () {
                vzeroIntegration.paymentMethodSwitch();
            }.bind(this));

            // Intercept any area of the checkout being updated
            this.vzero.observeAjaxRequests(function() {
                vzeroIntegration.paymentMethodSwitch();
            });

        },

        /**
         * Observe the payment method switch
         */
        preparePaymentMethodSwitchObserver: function() {

            // Store a pointer to the vZero integration
            var vzeroIntegration = this;

            // Store the original payment method
            var paymentSwitchOriginal = AdminOrder.prototype.switchPaymentMethod;

            // Intercept the save function
            AdminOrder.prototype.switchPaymentMethod = function (method) {

                // Run our method switch function
                vzeroIntegration.paymentMethodSwitch(method);

                // Run the original function
                return paymentSwitchOriginal.apply(this, arguments);
            };

            // Re-assign payment switch method
            payment.switchMethod = order.switchPaymentMethod.bind(order);

        },

        /**
         * Return the current payment method
         *
         * @returns {*}
         */
        getPaymentMethod: function() {
            return order.paymentMethod;
        },

        /**
         * The action to run after the payment processing is completed
         * As we aren't using a onepage checkout, we have to use the submitPayment action
         */
        submitPayment: function() {
            // Run the original checkouts submit action
            return order.submit();
        }

    });

    /**
     * Start a new instance of our integration
     *
     * @type {vZeroIntegration}
     */
    var AdminVzero = new vZeroIntegration(vzero);

    // stop Magento's card_validation ajax from running
    AdminOrder.prototype._getPaymentDataOriginal = AdminOrder.prototype.getPaymentData;
    AdminOrder.prototype.getPaymentData = function(currentMethod) {
        return (currentMethod == 'gene_braintree_creditcard') ? false : this._getPaymentDataOriginal(currentMethod);
    };
    //]]>
</script>